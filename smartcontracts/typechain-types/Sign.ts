/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Sign {
  export type LazyNFTVoucherStruct = {
    price: BigNumberish;
    uri: string;
    signature: BytesLike;
  };

  export type LazyNFTVoucherStructOutput = [BigNumber, string, string] & {
    price: BigNumber;
    uri: string;
    signature: string;
  };
}

export interface SignInterface extends utils.Interface {
  contractName: "Sign";
  functions: {
    "recover((uint256,string,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "recover",
    values: [Sign.LazyNFTVoucherStruct]
  ): string;

  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;

  events: {};
}

export interface Sign extends BaseContract {
  contractName: "Sign";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    recover(
      voucher: Sign.LazyNFTVoucherStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  recover(
    voucher: Sign.LazyNFTVoucherStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    recover(
      voucher: Sign.LazyNFTVoucherStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    recover(
      voucher: Sign.LazyNFTVoucherStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    recover(
      voucher: Sign.LazyNFTVoucherStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
