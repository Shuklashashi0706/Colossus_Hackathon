/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CyberMavenRegistryInterface extends utils.Interface {
  contractName: "CyberMavenRegistry";
  functions: {
    "account(address,uint256,address,uint256,uint256)": FunctionFragment;
    "accounts(uint256)": FunctionFragment;
    "counter()": FunctionFragment;
    "createAccount(address,uint256,address,uint256,uint256,bytes)": FunctionFragment;
    "intiateWallet(address,uint256,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "setImplementation(address)": FunctionFragment;
    "userAccount(address,uint256)": FunctionFragment;
    "userBalance(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "account",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "intiateWallet",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "account", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intiateWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AccountCreated(address,address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
}

export type AccountCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber],
  {
    account: string;
    implementation: string;
    chainId: BigNumber;
    tokenContract: string;
    tokenId: BigNumber;
    salt: BigNumber;
  }
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface CyberMavenRegistry extends BaseContract {
  contractName: "CyberMavenRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CyberMavenRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    account(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        tokenAddress: string;
        tokenId: BigNumber;
        walletAccount: string;
      }
    >;

    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    createAccount(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intiateWallet(
      tokenContract: string,
      tokenId: BigNumberish,
      init: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setImplementation(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAccount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        tokenAddress: string;
        tokenId: BigNumber;
        walletAccount: string;
      }
    >;

    userBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  account(
    implementation: string,
    chainId: BigNumberish,
    tokenContract: string,
    tokenId: BigNumberish,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  accounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      tokenAddress: string;
      tokenId: BigNumber;
      walletAccount: string;
    }
  >;

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  createAccount(
    implementation: string,
    chainId: BigNumberish,
    tokenContract: string,
    tokenId: BigNumberish,
    salt: BigNumberish,
    initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intiateWallet(
    tokenContract: string,
    tokenId: BigNumberish,
    init: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  setImplementation(
    contractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAccount(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      tokenAddress: string;
      tokenId: BigNumber;
      walletAccount: string;
    }
  >;

  userBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    account(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    accounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        tokenAddress: string;
        tokenId: BigNumber;
        walletAccount: string;
      }
    >;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    createAccount(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    intiateWallet(
      tokenContract: string,
      tokenId: BigNumberish,
      init: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    setImplementation(
      contractAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userAccount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        tokenAddress: string;
        tokenId: BigNumber;
        walletAccount: string;
      }
    >;

    userBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AccountCreated(address,address,uint256,address,uint256,uint256)"(
      account?: null,
      implementation?: null,
      chainId?: null,
      tokenContract?: null,
      tokenId?: null,
      salt?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      account?: null,
      implementation?: null,
      chainId?: null,
      tokenContract?: null,
      tokenId?: null,
      salt?: null
    ): AccountCreatedEventFilter;
  };

  estimateGas: {
    account(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    createAccount(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intiateWallet(
      tokenContract: string,
      tokenId: BigNumberish,
      init: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setImplementation(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAccount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    account(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAccount(
      implementation: string,
      chainId: BigNumberish,
      tokenContract: string,
      tokenId: BigNumberish,
      salt: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intiateWallet(
      tokenContract: string,
      tokenId: BigNumberish,
      init: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setImplementation(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAccount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
