/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801562000010575f80fd5b506040518060400160405280600881526020016726ac902a27a5a2a760c11b815250604051806040016040528060038152602001624d544b60e81b81525081600390816200005f9190620002bf565b5060046200006e8282620002bf565b505050620000a73362000086620000ad60201b60201c565b6200009390600a6200049a565b620000a1906103e8620004b1565b620000b2565b620004e1565b601290565b6001600160a01b038216620000e15760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b620000ee5f8383620000f2565b5050565b6001600160a01b03831662000120578060025f828254620001149190620004cb565b90915550620001929050565b6001600160a01b0383165f9081526020819052604090205481811015620001745760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000d8565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216620001b057600280548290039055620001ce565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200021491815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200024a57607f821691505b6020821081036200026957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002ba57805f5260205f20601f840160051c81016020851015620002965750805b601f840160051c820191505b81811015620002b7575f8155600101620002a2565b50505b505050565b81516001600160401b03811115620002db57620002db62000221565b620002f381620002ec845462000235565b846200026f565b602080601f83116001811462000329575f8415620003115750858301515b5f19600386901b1c1916600185901b17855562000383565b5f85815260208120601f198616915b82811015620003595788860151825594840194600190910190840162000338565b50858210156200037757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b80851115620003df57815f1904821115620003c357620003c36200038b565b80851615620003d157918102915b93841c9390800290620003a4565b509250929050565b5f82620003f75750600162000494565b816200040557505f62000494565b81600181146200041e5760028114620004295762000449565b600191505062000494565b60ff8411156200043d576200043d6200038b565b50506001821b62000494565b5060208310610133831016604e8410600b84101617156200046e575081810a62000494565b6200047a83836200039f565b805f19048211156200049057620004906200038b565b0290505b92915050565b5f620004aa60ff841683620003e7565b9392505050565b80820281158282048414176200049457620004946200038b565b808201808211156200049457620004946200038b565b61087d80620004ef5f395ff3fe608060405234801561000f575f80fd5b506004361061009b575f3560e01c806370a082311161006357806370a082311461011457806379c650681461013c57806395d89b4114610151578063a9059cbb14610159578063dd62ed3e1461016c575f80fd5b806306fdde031461009f578063095ea7b3146100bd57806318160ddd146100e057806323b872dd146100f2578063313ce56714610105575b5f80fd5b6100a76101a4565b6040516100b491906105ca565b60405180910390f35b6100d06100cb366004610631565b610234565b60405190151581526020016100b4565b6002545b6040519081526020016100b4565b6100d0610100366004610659565b61024d565b604051601281526020016100b4565b6100e4610122366004610692565b6001600160a01b03165f9081526020819052604090205490565b61014f61014a366004610631565b610270565b005b6100a7610293565b6100d0610167366004610631565b6102a2565b6100e461017a3660046106b2565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101b3906106e3565b80601f01602080910402602001604051908101604052809291908181526020018280546101df906106e3565b801561022a5780601f106102015761010080835404028352916020019161022a565b820191905f5260205f20905b81548152906001019060200180831161020d57829003601f168201915b5050505050905090565b5f336102418185856102af565b60019150505b92915050565b5f3361025a8582856102c1565b610265858585610341565b506001949350505050565b61028f826102806012600a61080f565b61028a908461081d565b61039e565b5050565b6060600480546101b3906106e3565b5f33610241818585610341565b6102bc83838360016103d2565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f19811461033b578181101561032d57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61033b84848484035f6103d2565b50505050565b6001600160a01b03831661036a57604051634b637e8f60e11b81525f6004820152602401610324565b6001600160a01b0382166103935760405163ec442f0560e01b81525f6004820152602401610324565b6102bc8383836104a4565b6001600160a01b0382166103c75760405163ec442f0560e01b81525f6004820152602401610324565b61028f5f83836104a4565b6001600160a01b0384166103fb5760405163e602df0560e01b81525f6004820152602401610324565b6001600160a01b03831661042457604051634a1406b160e11b81525f6004820152602401610324565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561033b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161049691815260200190565b60405180910390a350505050565b6001600160a01b0383166104ce578060025f8282546104c39190610834565b9091555061053e9050565b6001600160a01b0383165f90815260208190526040902054818110156105205760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610324565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661055a57600280548290039055610578565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105bd91815260200190565b60405180910390a3505050565b5f602080835283518060208501525f5b818110156105f6578581018301518582016040015282016105da565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461062c575f80fd5b919050565b5f8060408385031215610642575f80fd5b61064b83610616565b946020939093013593505050565b5f805f6060848603121561066b575f80fd5b61067484610616565b925061068260208501610616565b9150604084013590509250925092565b5f602082840312156106a2575f80fd5b6106ab82610616565b9392505050565b5f80604083850312156106c3575f80fd5b6106cc83610616565b91506106da60208401610616565b90509250929050565b600181811c908216806106f757607f821691505b60208210810361071557634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561076957815f190482111561074f5761074f61071b565b8085161561075c57918102915b93841c9390800290610734565b509250929050565b5f8261077f57506001610247565b8161078b57505f610247565b81600181146107a157600281146107ab576107c7565b6001915050610247565b60ff8411156107bc576107bc61071b565b50506001821b610247565b5060208310610133831016604e8410600b84101617156107ea575081810a610247565b6107f4838361072f565b805f19048211156108075761080761071b565b029392505050565b5f6106ab60ff841683610771565b80820281158282048414176102475761024761071b565b808201808211156102475761024761071b56fea2646970667358221220be773d1701bca34494df11dacd293fa3cb608a0dbaf2dcd1c052a17a260c8b1e64736f6c63430008180033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Token";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly contractName: "Token";
  public readonly contractName: "Token";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
