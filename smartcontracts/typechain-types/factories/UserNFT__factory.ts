/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { UserNFT, UserNFTInterface } from "../UserNFT";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405180604001604052806008815260200167155cd95c8813919560c21b815250604051806040016040528060048152602001631553919560e21b81525081600090816200006191906200011e565b5060016200007082826200011e565b505050620001ea565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a457607f821691505b602082108103620000c557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011957600081815260208120601f850160051c81016020861015620000f45750805b601f850160051c820191505b81811015620001155782815560010162000100565b5050505b505050565b81516001600160401b038111156200013a576200013a62000079565b62000152816200014b84546200008f565b84620000cb565b602080601f8311600181146200018a5760008415620001715750858301515b600019600386901b1c1916600185901b17855562000115565b600085815260208120601f198616915b82811015620001bb578886015182559484019460019091019084016200019a565b5085821015620001da5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61133680620001fa6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636871ee401161008c578063a22cb46511610066578063a22cb465146101d6578063b88d4fde146101e9578063c87b56dd146101fc578063e985e9c51461020f57600080fd5b80636871ee40146101a557806370a08231146101ad57806395d89b41146101ce57600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806342842e0e1461017f5780636352211e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610e9b565b61024b565b60405190151581526020015b60405180910390f35b61011f61029d565b60405161010e9190610f08565b61013f61013a366004610f1b565b61032f565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610f50565b610356565b005b61016a61017a366004610f7a565b610470565b61016a61018d366004610f7a565b6104a1565b61013f6101a0366004610f1b565b6104bc565b61016a61051c565b6101c06101bb366004610fb6565b610540565b60405190815260200161010e565b61011f6105c6565b61016a6101e4366004610fd1565b6105d5565b61016a6101f7366004611023565b6105e4565b61011f61020a366004610f1b565b61061c565b61010261021d3660046110ff565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061027c57506001600160e01b03198216635b5e139f60e01b145b8061029757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102ac90611132565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611132565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b600061033a82610690565b506000908152600460205260409020546001600160a01b031690565b6000610361826104bc565b9050806001600160a01b0316836001600160a01b0316036103d35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103ef57506103ef813361021d565b6104615760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103ca565b61046b83836106ef565b505050565b61047a338261075d565b6104965760405162461bcd60e51b81526004016103ca9061116c565b61046b8383836107dc565b61046b838383604051806020016040528060008152506105e4565b6000818152600260205260408120546001600160a01b0316806102975760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103ca565b600680546000918261052d836111b9565b91905055905061053d3382610940565b50565b60006001600160a01b0382166105aa5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103ca565b506001600160a01b031660009081526003602052604090205490565b6060600180546102ac90611132565b6105e033838361095a565b5050565b6105ee338361075d565b61060a5760405162461bcd60e51b81526004016103ca9061116c565b61061684848484610a28565b50505050565b606061062782610690565b600061063e60408051602081019091526000815290565b9050600081511161065e5760405180602001604052806000815250610689565b8061066884610a5b565b6040516020016106799291906111e0565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661053d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103ca565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610724826104bc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610769836104bc565b9050806001600160a01b0316846001600160a01b031614806107b057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107d45750836001600160a01b03166107c98461032f565b6001600160a01b0316145b949350505050565b826001600160a01b03166107ef826104bc565b6001600160a01b0316146108155760405162461bcd60e51b81526004016103ca9061120f565b6001600160a01b0382166108775760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103ca565b826001600160a01b031661088a826104bc565b6001600160a01b0316146108b05760405162461bcd60e51b81526004016103ca9061120f565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6105e0828260405180602001604052806000815250610aee565b816001600160a01b0316836001600160a01b0316036109bb5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103ca565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a338484846107dc565b610a3f84848484610b21565b6106165760405162461bcd60e51b81526004016103ca90611254565b60606000610a6883610c22565b600101905060008167ffffffffffffffff811115610a8857610a8861100d565b6040519080825280601f01601f191660200182016040528015610ab2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610abc57509392505050565b610af88383610cfa565b610b056000848484610b21565b61046b5760405162461bcd60e51b81526004016103ca90611254565b60006001600160a01b0384163b15610c1757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610b659033908990889088906004016112a6565b6020604051808303816000875af1925050508015610ba0575060408051601f3d908101601f19168201909252610b9d918101906112e3565b60015b610bfd573d808015610bce576040519150601f19603f3d011682016040523d82523d6000602084013e610bd3565b606091505b508051600003610bf55760405162461bcd60e51b81526004016103ca90611254565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107d4565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c615772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c8d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610cab57662386f26fc10000830492506010015b6305f5e1008310610cc3576305f5e100830492506008015b6127108310610cd757612710830492506004015b60648310610ce9576064830492506002015b600a83106102975760010192915050565b6001600160a01b038216610d505760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103ca565b6000818152600260205260409020546001600160a01b031615610db55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103ca565b6000818152600260205260409020546001600160a01b031615610e1a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103ca565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461053d57600080fd5b600060208284031215610ead57600080fd5b813561068981610e85565b60005b83811015610ed3578181015183820152602001610ebb565b50506000910152565b60008151808452610ef4816020860160208601610eb8565b601f01601f19169290920160200192915050565b6020815260006106896020830184610edc565b600060208284031215610f2d57600080fd5b5035919050565b80356001600160a01b0381168114610f4b57600080fd5b919050565b60008060408385031215610f6357600080fd5b610f6c83610f34565b946020939093013593505050565b600080600060608486031215610f8f57600080fd5b610f9884610f34565b9250610fa660208501610f34565b9150604084013590509250925092565b600060208284031215610fc857600080fd5b61068982610f34565b60008060408385031215610fe457600080fd5b610fed83610f34565b91506020830135801515811461100257600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561103957600080fd5b61104285610f34565b935061105060208601610f34565b925060408501359150606085013567ffffffffffffffff8082111561107457600080fd5b818701915087601f83011261108857600080fd5b81358181111561109a5761109a61100d565b604051601f8201601f19908116603f011681019083821181831017156110c2576110c261100d565b816040528281528a60208487010111156110db57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561111257600080fd5b61111b83610f34565b915061112960208401610f34565b90509250929050565b600181811c9082168061114657607f821691505b60208210810361116657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000600182016111d957634e487b7160e01b600052601160045260246000fd5b5060010190565b600083516111f2818460208801610eb8565b835190830190611206818360208801610eb8565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906112d990830184610edc565b9695505050505050565b6000602082840312156112f557600080fd5b815161068981610e8556fea2646970667358221220f57cc70e8fb6c1b198e453fc55cf345c2e5ace9051c8e8fd4d127759d7e7766164736f6c63430008110033";

type UserNFTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserNFT__factory extends ContractFactory {
  constructor(...args: UserNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UserNFT";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UserNFT> {
    return super.deploy(overrides || {}) as Promise<UserNFT>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UserNFT {
    return super.attach(address) as UserNFT;
  }
  connect(signer: Signer): UserNFT__factory {
    return super.connect(signer) as UserNFT__factory;
  }
  static readonly contractName: "UserNFT";
  public readonly contractName: "UserNFT";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserNFTInterface {
    return new utils.Interface(_abi) as UserNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserNFT {
    return new Contract(address, _abi, signerOrProvider) as UserNFT;
  }
}
